trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - .gitignore
    - README.md

pr:
  branches:
    include:
    - main
  paths:
    exclude:
    - .gitignore
    - README.md


resources:
  pipelines:
  - pipeline: pl-pkr-golden-images # Name of the pipeline resource.
    source: kvncont.pkr-golden-images # The name of the pipeline referenced by this pipeline resource.
    project: Infrastructure as Code Azure # Required only if the source pipeline is in another project
    trigger:
      branches:
        include:
        - main

pool:
  vmImage: ubuntu-latest

variables:
- group: group-tf-secrets
- name: image-id
  value: $[replace(variables['Resources.Pipeline.pl-pkr-golden-images.Runname'], '.', '-')]
- name: image-name
  value: azdo-agent-pool-$(image-id)
- name: working-directory
  value: $(System.DefaultWorkingDirectory)/terraform/

stages:
- stage: CI
  displayName: CI - Stage
  jobs:
  - job: validate
    displayName: Validate changes
    steps:
    - task: Bash@3
      displayName: Terraform format
      inputs:
        targetType: 'inline'
        script: |
          terraform fmt -check
        workingDirectory: '$(working-directory)'
    
    - task: Bash@3
      displayName: Terraform validate
      inputs:
        targetType: inline
        script: |
          terraform init -backend=false
          terraform validate
        workingDirectory: '$(working-directory)'
      
    - task: TerraformTaskV3@3
      displayName: Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(working-directory)'
        backendServiceArm: 'Development'
        backendAzureRmResourceGroupName: '$(tf-st-rg-name)'
        backendAzureRmStorageAccountName: '$(tf-st-name)'
        backendAzureRmContainerName: '$(tf-st-container-name)'
        backendAzureRmKey: '$(tf-st-key)'

    - task: TerraformTaskV3@3
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(working-directory)'
        commandOptions: '-var="image_name=$(image-name)" -var="vm_admin_passwd=$(tf-vm-admin-passwd)" -out tf.plan'
        environmentServiceNameAzureRM: 'Development'
    
    - task: PublishPipelineArtifact@1
      displayName: Publish terraform plan
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        targetPath: '$(working-directory)/plan_$(Build.BuildNumber).tfplan'
        artifact: 'Plan'
        publishLocation: 'pipeline'
      
- stage: CD
  displayName: CD - Stage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  dependsOn: CI
  jobs:
  - deployment: Deploy
    environment: Development IaC
    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: self

          - download: none

          - task: DownloadPipelineArtifact@2
            displayName: Download terraform plan
            inputs:
              buildType: 'current'
              artifactName: 'Plan'
              targetPath: '$(working-directory)'

          - task: TerraformTaskV3@3
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(working-directory)'
              backendServiceArm: 'Development'
              backendAzureRmResourceGroupName: '$(tf-st-rg-name)'
              backendAzureRmStorageAccountName: '$(tf-st-name)'
              backendAzureRmContainerName: '$(tf-st-container-name)'
              backendAzureRmKey: '$(tf-st-key)'

          - task: TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(working-directory)'
              commandOptions: 'tf.plan'
              environmentServiceNameAzureRM: 'Development'